<#
.SYNOPSIS
    Retrieves all managed accounts from BeyondTrust Password Safe using pagination and allows filtering by domain name or username.

.DESCRIPTION
    This script automates the retrieval of managed accounts from BeyondTrust Password Safe, bypassing the 1,000 record limit using pagination. 
    It supports filtering by domain name (or server name) and username.

.VERSION HISTORY
    1.1 - 04-12-2024 - Streamlined version focusing on managed account retrieval by Irtaza Chohan

.NOTES
    Author: Irtaza Chohan
    Date: 04-12-2024
#>

# Prompt user for the API Key and run-as user
$apiKey = Read-Host "Enter your API Key"
$runAsUser = Read-Host "Enter the run-as user (e.g., lseg\ichohan-a)"
$Credential = Get-Credential -Message "Enter your password (leave blank if not required):" -UserName $runAsUser

# Set the base URL for BeyondTrust
$BThost = "paa.prod.stockex.local"
$baseUrl = "https://${BThost}/BeyondTrust/api/public/v3/"
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

# Forming the Authorization header
$headers = if ($Credential.Password.Length -gt 0) {
    @{ Authorization = "PS-Auth key=${apiKey};runas=${runAsUser};pwd=[${Credential.GetNetworkCredential().Password}]" }
} else {
    @{ Authorization = "PS-Auth key=${apiKey};runas=${runAsUser}" }
}

# Define search parameters
$domainName = Read-Host "Enter the domain or server name to search for"
$accountName = Read-Host "Enter the username to search for (leave blank to ignore)"

# Function to retrieve all managed accounts with filtering
function Get-ManagedAccounts {
    param (
        [string]$baseUrl,
        [hashtable]$headers,
        [string]$domainName,
        [string]$accountName,
        [int]$limit = 1000
    )

    $offset = 0
    $allAccounts = @()

    while ($true) {
        $uri = "${baseUrl}ManagedAccounts?limit=${limit}&offset=${offset}"
        Write-Host "Requesting: $uri"
        $response = Invoke-RestMethod -Uri $uri -Method Get -Headers $headers

        if ($response.Count -eq 0) {
            break
        }

        $allAccounts += $response.accounts
        $offset += $limit

        if ($response.Count -lt $limit) {
            break
        }
    }

    # Filter accounts based on domain/server name and optional username
    $filteredAccounts = $allAccounts | Where-Object {
        ($_.domainName -eq $domainName -or $_.serverName -eq $domainName) -and
        ($accountName -eq "" -or $_.username -eq $accountName)
    }

    return $filteredAccounts
}

# Retrieve the managed accounts
try {
    $managedAccounts = Get-ManagedAccounts -baseUrl $baseUrl -headers $headers -domainName $domainName -accountName $accountName
    if ($managedAccounts.Count -eq 0) {
        Write-Host "No managed accounts found matching the criteria."
    } else {
        Write-Host "Managed accounts matching the criteria:"
        $managedAccounts | Format-Table -Property id, username, domainName, serverName
    }
} catch {
    Write-Host "Failed to retrieve managed accounts: $($_.Exception.Message)"
    throw
}
